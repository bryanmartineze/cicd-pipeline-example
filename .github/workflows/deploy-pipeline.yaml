permissions:
  id-token: write
  #Was changed from read to write to create a checkout -b to gh-pages
  contents: write

name: Deploy train schedule
on: 

  workflow_dispatch:

jobs:

  build-and-test-with-gradle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3
      - name: Set up Java 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Check Java version
        run: java -version
      - name: Setup Gradle and build
        run: |
            ./gradlew build
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: zipped-bundle
          path: dist/trainSchedule.zip
    
          
  upload-artifact-to-s3:
    runs-on: ubuntu-latest
    needs: build-and-test-with-gradle
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: zipped-bundle
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gh_actions_role_example_pipeline
          aws-region: us-east-1
      - name: Upload to S3
        run: aws s3 cp trainSchedule.zip s3://cicd-pipeline-example-artifacts/${{ github.repository }}/trainSchedule.zip
       
  push-to-dockerhub:
    runs-on: ubuntu-latest
    needs: build-and-test-with-gradle
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3
      - name: docker login
        env: 
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: build docker image
        run: docker build -t bryanmartineze/train-schedule:latest .
      - name: docker push
        run: docker push ${{ secrets.DOCKER_USER }}/train-schedule:latest
       
  provision-test-infrastructure-with-terraform:
    runs-on: ubuntu-latest
    needs: push-to-dockerhub
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        working-directory: terraform
        id: init
        run: terraform init
      - name: Terraform Lint
        working-directory: terraform
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Validate
        working-directory: terraform
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        working-directory: terraform
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Terraform Plan Status
        working-directory: terraform
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

  provision-docker-with-ansible:
    runs-on: ubuntu-latest
    needs: provision-test-infrastructure-with-terraform
    steps:      
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install dependencies
      run: |
        python -m pip install ansible
    - name: create inventory.ini
      run: |
        cd terraform
        ip=$(terraform output docker_ip)
        cd ../ansible
        touch inventory.ini
        echo $ip > inventory.ini
    - name: retrieve ssh key from terraform output
      run: |
        cd terraform
        SSH_PRIVATE_KEY=$(terraform output -raw docker_key)
    - name: Add hosts to known_hosts
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        ssh-keyscan -f inventory.ini > known_hosts
        cat known_hosts >> ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< $SSH_PRIVATE_KEY
    - name: Run ansible playbook
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock              
      run: |
        cd ansible
        ansible-playbook playbook.yml -u root --private-key=$SSH_PRIVATE_KEY -i inventory.ini -vvv
           
